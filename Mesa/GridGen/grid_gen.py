from pathfinding.core.grid import Grid
from pathfinding.core.world import World
from pathfinding.finder.a_star import AStarFinder
from pathfinding.core.diagonal_movement import DiagonalMovement

# Initial Down Grid
gD= [
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1],
    [0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1],
    [0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1],
    [0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1],
    [0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1],
    [0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1],
    [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
]
# Initial Up Grid
gU = [
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0],
    [1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0],
    [1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0],
    [1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0],
    [1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0],
    [1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0],
    [1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0],
    [1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0],
    [1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0],
    [1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0],
    [1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0],
    [1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0],
    [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
]
# Initial Left Grid
gL = [
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0],
    [0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0],
    [0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 1, 1, 2, 3, 3, 0, 3, 3, 2, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1],
    [0, 0, 0, 1, 1, 1, 2, 3, 0, 3, 2, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0],
    [0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 2, 4, 3, 2, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0],
    [0, 0, 2, 4, 3, 2, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0],
    [0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0],
    [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
]
#Initial Right Grid
gR = [
    [1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0],
    [0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0],
    [0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0],
    [0, 0, 1, 1, 1, 1, 2, 3, 0, 3, 2, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0],
    [0, 0, 1, 1, 1, 2, 3, 3, 0, 3, 3, 2, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0],
    [0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
]
gM = [
    [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
    [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
    [1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1],
    [1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1],
    [1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1],
    [1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1],
    [1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1],
    [1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1],
    [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
    [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
    [1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1],
    [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
    [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
    [1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1],
    [1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1],
    [1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1],
    [1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1],
    [1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
    [1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
    [1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1],
    [1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1],
    [1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1],
    [1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1],
    [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
    [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
]

gTL = [
#    0  1  2  3  4  5  6  7  8  9  0  1  2  3  4  5  6  7  8  9  0  1  2  3
    [0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0], #0
    [0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0], #1
    [0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0], #2
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0], #3
    [0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], #4
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], #5
    [0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], #6
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1], #7
    [0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0], #8  
    [0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0], #9
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], #0
    [0, 0, 1, 0, 0, 0, 0, 0, 4, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0], #1
    [0, 0, 1, 0, 0, 0, 0, 0, 3, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0], #2
    [1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], #3
    [0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0], #4
    [0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0], #5
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], #6
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0], #7
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0], #8
    [0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0], #9
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0], #0
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], #1
    [0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], #2
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], #3
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]  #4
]

def create_grid(matrix, grid_id):
    return Grid(matrix=matrix, grid_id=grid_id)

gDown = create_grid(gD, 0)
gUp = create_grid(gU, 1)
gLeft = create_grid(gL, 2)
gRight = create_grid(gR, 3)
gTls = create_grid(gTL, 4)
gMap = create_grid(gM, 5)

### ---- Grid Connections ---- ###

# Down Grid Connections
gDown.node(22, 5).connect(gLeft.node(21, 5)) #✅
gDown.node(22, 6).connect(gTls.node(22, 7))  #✅🚦❇️
gDown.node(23, 6).connect(gTls.node(23, 7))  #✅🚦❇️
gDown.node(22, 10).connect(gLeft.node(22, 11)) #✅ 
gDown.node(22, 17).connect(gLeft.node(21, 17)) #✅
gDown.node(22, 18).connect(gLeft.node(21, 18)) #✅ 
gDown.node(9, 21).connect(gTls.node(9, 22))  #✅🚦❇️
gDown.node(10, 21).connect(gTls.node(10, 22)) #✅🚦❇️
gDown.node(22, 22).connect(gLeft.node(22, 23)) #✅
gDown.node(23, 23).connect(gLeft.node(23, 24))  #✅
gDown.node(9, 7).connect(gRight.node(9, 8))  #✅
gDown.node(10, 7).connect(gRight.node(10, 8))  #✅
gDown.node(9, 15).connect(gTls.node(9, 16))  #🟨❇️
gDown.node(10, 15).connect(gTls.node(10, 16)) #🟨❇️
# Rotonda
gDown.node(10, 10).connect(gLeft.node(9, 11))  #✅
gDown.node(10, 10).connect(gLeft.node(10, 11))  #✅
gDown.node(11, 10).connect(gLeft.node(10, 11))  #✅
gDown.node(11, 10).connect(gLeft.node(11, 11))  #✅

# Up Grid Connections
gUp.node(0, 1).connect(gRight.node(0, 0)) #✅  
gUp.node(1, 2).connect(gRight.node(1, 1)) #✅
gUp.node(6, 3).connect(gTls.node(6, 2)) #✅🚦❇️
gUp.node(7, 3).connect(gTls.node(7, 2)) #✅🚦❇️
gUp.node(15, 3).connect(gTls.node(15, 2)) #✅🚦❇️
gUp.node(16, 3).connect(gTls.node(16, 2)) #✅🚦❇️
gUp.node(1, 9).connect(gRight.node(2, 9)) #✅
gUp.node(1, 8).connect(gRight.node(2, 8)) #✅ 
gUp.node(0, 14).connect(gTls.node(0, 13)) #✅🚦❇️
gUp.node(1, 14).connect(gTls.node(1, 13)) #✅🚦❇️
gUp.node(6, 13).connect(gLeft.node(6, 12)) #✅
gUp.node(7, 13).connect(gLeft.node(7, 12)) #✅
gUp.node(6, 18).connect(gLeft.node(5, 18)) #✅ 
gUp.node(6, 17).connect(gLeft.node(5, 17)) #✅ 
gUp.node(15, 13).connect(gLeft.node(15, 12)) #✅
gUp.node(16, 13).connect(gLeft.node(16, 12)) #✅
gUp.node(15, 20).connect(gTls.node(15, 19)) #✅🚦❇️
gUp.node(16, 20).connect(gTls.node(16, 19)) #✅🚦❇️
# Rotonda
gUp.node(6, 10).connect(gRight.node(6, 9)) #✅
gUp.node(6, 10).connect(gRight.node(7, 9)) #✅ 
gUp.node(5, 10).connect(gRight.node(5, 9)) #✅ 
gUp.node(5, 10).connect(gRight.node(6, 9)) #✅ 

# Left Grid Connections
gLeft.node(1, 23).connect(gUp.node(1, 22)) #✅
gLeft.node(1, 24).connect(gUp.node(0, 24)) #✅
gLeft.node(16, 23).connect(gUp.node(16, 22)) #✅
gLeft.node(15, 23).connect(gUp.node(15, 22)) #✅
gLeft.node(12, 23).connect(gTls.node(11, 23)) #✅🚦❇️
gLeft.node(12, 24).connect(gTls.node(11, 24)) #✅🚦❇️
gLeft.node(6, 23).connect(gUp.node(6, 22)) #✅
gLeft.node(7, 23).connect(gUp.node(7, 22)) #✅
gLeft.node(2, 17).connect(gUp.node(1, 17)) #✅
gLeft.node(2, 18).connect(gUp.node(1, 18)) #✅ 
gLeft.node(3, 11).connect(gTls.node(2, 11)) #✅🚦❇️
gLeft.node(3, 12).connect(gTls.node(2, 12)) #✅🚦❇️
gLeft.node(16, 17).connect(gUp.node(16, 16)) #✅  
gLeft.node(15, 17).connect(gUp.node(15, 16)) #✅
gLeft.node(11, 17).connect(gDown.node(10, 17)) #✅
gLeft.node(11, 18).connect(gDown.node(10, 18)) #✅  
gLeft.node(23, 12).connect(gDown.node(23, 13)) #✅
gLeft.node(22, 12).connect(gDown.node(22, 13)) #✅
gLeft.node(18, 17).connect(gTls.node(17, 17)) #✅🚦❇️
gLeft.node(18, 18).connect(gTls.node(17, 18)) #✅🚦❇️
gLeft.node(10, 12).connect(gDown.node(10, 13)) #✅ 
gLeft.node(9, 12).connect(gDown.node(9, 13)) #✅    
gLeft.node(17, 5).connect(gUp.node(16, 5))  #✅
gLeft.node(13, 11).connect(gTls.node(12, 11)) #🟨❇️
gLeft.node(13, 12).connect(gTls.node(12, 12)) #🟨❇️
gLeft.node(18, 11).connect(gTls.node(17, 11)) #🟨❇️
gLeft.node(18, 12).connect(gTls.node(17, 12)) #🟨❇️
gLeft.node(9, 11).connect(gTls.node(8, 11)) #🟨❇️
gLeft.node(9, 12).connect(gTls.node(8, 12)) #🟨❇️

# Rotonda
gLeft.node(7, 11).connect(gUp.node(6, 10)) #✅ 
gLeft.node(6, 11).connect(gUp.node(6, 10)) #✅
gLeft.node(6, 11).connect(gUp.node(5, 10)) #✅
gLeft.node(5, 11).connect(gUp.node(5, 10)) #✅

# Right Grid Connections
gRight.node(22, 0).connect(gDown.node(23, 0)) #✅
gRight.node(21, 1).connect(gDown.node(22, 1)) #✅
gRight.node(13, 0).connect(gTls.node(14, 0)) #✅🚦❇️
gRight.node(13, 1).connect(gTls.node(14, 1)) #✅🚦❇️
gRight.node(4, 0).connect(gRight.node(5, 0)) #✅
gRight.node(4, 1).connect(gRight.node(5, 1)) #✅
gRight.node(9, 1).connect(gDown.node(9, 2))  #✅
gRight.node(10, 1).connect(gDown.node(10, 2)) #✅
gRight.node(20, 8).connect(gTls.node(21, 8)) #✅🚦❇️
gRight.node(20, 9).connect(gTls.node(21, 9)) #✅🚦❇️
gRight.node(15, 8).connect(gUp.node(15, 7)) #✅ 
gRight.node(16, 8).connect(gUp.node(16, 7)) #✅
gRight.node(6, 8).connect(gUp.node(6, 7)) #✅
gRight.node(7, 8).connect(gUp.node(7, 7)) #✅
gRight.node(11, 8).connect(gTls.node(12, 8)) #🟨❇️
gRight.node(11, 9).connect(gTls.node(12, 9)) #🟨❇️
gRight.node(7, 8).connect(gTls.node(8, 8))   #🟨❇️
gRight.node(7, 9).connect(gTls.node(8, 9))   #🟨❇️
# Rotonda
gRight.node(9, 9).connect(gDown.node(10, 10)) #✅
gRight.node(10, 9).connect(gDown.node(10, 10)) #✅
gRight.node(10, 9).connect(gDown.node(11, 10)) #✅
gRight.node(11, 9).connect(gDown.node(11, 10)) #✅

# Traffic Lights Connections
gTls.node(22, 7).connect(gDown.node(22, 8))  #✅🚦
gTls.node(23, 7).connect(gDown.node(23, 8))  #✅🚦
gTls.node(9, 22).connect(gLeft.node(9, 23))  #✅🚦
gTls.node(10, 22).connect(gLeft.node(10, 23))  #✅🚦
gTls.node(6, 2).connect(gRight.node(6, 1))  #✅🚦
gTls.node(7, 2).connect(gRight.node(7, 1))  #✅🚦
gTls.node(15, 2).connect(gRight.node(15, 1))  #✅🚦
gTls.node(16, 2).connect(gRight.node(16, 1))  #✅🚦
gTls.node(0, 13).connect(gUp.node(0, 12))  #✅🚦
gTls.node(1, 13).connect(gUp.node(1, 12))  #✅🚦
gTls.node(15, 19).connect(gLeft.node(15, 18))  #✅🚦
gTls.node(16, 19).connect(gLeft.node(16, 18))  #✅🚦
gTls.node(11, 23).connect(gLeft.node(10, 23))  #✅🚦
gTls.node(11, 24).connect(gLeft.node(10, 24))  #✅🚦
gTls.node(2, 11).connect(gUp.node(1, 11))  #✅🚦
gTls.node(2, 12).connect(gUp.node(1, 12))  #✅🚦
gTls.node(17, 17).connect(gLeft.node(16, 17))  #✅🚦
gTls.node(17, 18).connect(gLeft.node(16, 18))  #✅🚦
gTls.node(14, 0).connect(gRight.node(15, 0))  #✅🚦
gTls.node(14, 1).connect(gRight.node(15, 1))  #✅🚦
gTls.node(21, 8).connect(gDown.node(22, 8))  #✅🚦
gTls.node(21, 9).connect(gDown.node(22, 9))  #✅🚦
# Direction Connections
gTls.node(9, 16).connect(gDown.node(9, 17))  #✅🟨
gTls.node(10, 16).connect(gDown.node(10, 17))  #✅🟨
gTls.node(12, 11).connect(gLeft.node(11, 11))  #✅🟨
gTls.node(12, 12).connect(gLeft.node(11, 12))  #✅🟨
gTls.node(17, 11).connect(gLeft.node(16, 11))  #✅🟨
gTls.node(17, 12).connect(gLeft.node(16, 12))  #✅🟨
gTls.node(12, 8).connect(gRight.node(13, 8))  #✅🟨
gTls.node(12, 9).connect(gRight.node(13, 9))  #✅🟨
gTls.node(8, 8).connect(gRight.node(9, 8))  #✅🟨
gTls.node(8, 9).connect(gRight.node(9, 9))  #✅🟨
gTls.node(8, 11).connect(gLeft.node(7, 11))  #✅🟨
gTls.node(8, 12).connect(gLeft.node(7, 12))  #✅🟨
gTls.node(8, 12).connect(gLeft.node(7, 11))  #✅🟨

### ---- #### ---- ###

def create_world():
    return World({
        0: gDown,
        1: gUp,
        2: gLeft,
        3: gRight,
        4: gTls,
    })

def get_finder():
    return AStarFinder(diagonal_movement=DiagonalMovement.if_at_most_one_obstacle)